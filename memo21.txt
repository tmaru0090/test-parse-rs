   if *is_system {
            match name.as_str() {
                "exit" => {
                    if args.len() != 1 {
                        return Err("exit expects exactly one argument".into());
                    }
                    let status = match self.execute_node(&args[0])? {
                        Value::Number(n) => n.as_i64().ok_or("exit expects a positive integer")?,
                        _ => return Err("exit expects a number as the status".into()),
                    };
                    std::process::exit(status.try_into().unwrap());
                }
                "args" => {
                    if !args.is_empty() {
                        return Err("args expects no arguments".into());
                    }
                    let args: Vec<String> = std::env::args().collect();
                    let value: Value = Value::Array(args.into_iter().map(Value::String).collect());
                    return Ok(value);
                }
                "cmd" => {
                    if evaluated_args.len() < 1 {
                        return Err("cmd expects at least one argument".into());
                    }
                    let command = match &evaluated_args[0] {
                        Value::String(v) => v.clone(),
                        _ => return Err("cmd expects the first argument to be a string".into()),
                    };
                    let command_args = if evaluated_args.len() > 1 {
                        match &evaluated_args[1] {
                            Value::Array(v) => v
                                .iter()
                                .filter_map(|item| {
                                    if let Value::String(s) = item {
                                        Some(s.clone())
                                    } else {
                                        None
                                    }
                                })
                                .collect(),
                            _ => {
                                return Err(
                                    "cmd expects the second argument to be an array of strings"
                                        .into(),
                                )
                            }
                        }
                    } else {
                        Vec::new()
                    };
                    let output = Command::new(command)
                        .args(&command_args)
                        .output()
                        .expect("外部コマンドの実行に失敗しました");
                    let stdout = String::from_utf8_lossy(&output.stdout).to_string();
                    let stderr = String::from_utf8_lossy(&output.stderr).to_string();
                    return Ok(Value::Array(vec![
                        Value::String(stdout),
                        Value::String(stderr),
                    ]));
                }
                // 他のシステム関数の処理...
                _ => return Err(format!("Unknown function: {}", name)),
            }
        }

