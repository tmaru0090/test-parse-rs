/*

#[derive(Debug, Clone, Property)]
pub struct Decoder {
    #[property(get)]
    global_variables: HashMap<String, VariableValue>, // グローバルスコープ

    #[property(get)]
    func_lists: HashMap<
        String, // 関数名
        (
            Vec<String>,                              // 引数名のリスト
            Box<Node>,                                // 関数実装(AST)
            VariableValue,                            // 関数戻り値
            VariableValue,                            // 関数戻り値の型
            Vec<Vec<HashMap<String, VariableValue>>>, // 関数ローカルスタック
        ),
    >,
    #[property(get)]
    last_var_name: Option<String>,

    #[property(get)]
    comment_lists: HashMap<String, (Vec<String>, i32)>,

    #[property(get)]
    current_node: Option<Box<Node>>, // 現在のノードを保持
    #[property(get)]
    current_function: Option<String>, // 現在の関数名を保持するフィールドを追加
    #[property(get)]
    input: String,
}

#[derive(Clone, Debug)]
pub enum VariableValue {
    Int32(i32),
    Int64(i64),
    Float32(f32),
    Float64(f64),
    Str(String),
    Bool(bool),
    Unit(()),
}

// `Add` トレイトの実装
impl Add for VariableValue {
    type Output = VariableValue;

    fn add(self, other: VariableValue) -> VariableValue {
        match (self.clone(), other.clone()) {
            (VariableValue::Int32(l), VariableValue::Int32(r)) => VariableValue::Int32(l + r),
            (VariableValue::Int64(l), VariableValue::Int64(r)) => VariableValue::Int64(l + r),
            (VariableValue::Float32(l), VariableValue::Float32(r)) => VariableValue::Float32(l + r),
            (VariableValue::Float64(l), VariableValue::Float64(r)) => VariableValue::Float64(l + r),
            (VariableValue::Str(l), VariableValue::Str(r)) => VariableValue::Str(l + &r),
            _ => panic!("Unsupported addition between {:?} and {:?}", self, other),
        }
    }
}

// `Sub` トレイトの実装
impl Sub for VariableValue {
    type Output = VariableValue;

    fn sub(self, other: VariableValue) -> VariableValue {
        match (self.clone(), other.clone()) {
            (VariableValue::Int32(l), VariableValue::Int32(r)) => VariableValue::Int32(l - r),
            (VariableValue::Int64(l), VariableValue::Int64(r)) => VariableValue::Int64(l - r),
            (VariableValue::Float32(l), VariableValue::Float32(r)) => VariableValue::Float32(l - r),
            (VariableValue::Float64(l), VariableValue::Float64(r)) => VariableValue::Float64(l - r),
            _ => panic!("Unsupported subtraction between {:?} and {:?}", self, other),
        }
    }
}

// `Mul` トレイトの実装
impl Mul for VariableValue {
    type Output = VariableValue;

    fn mul(self, other: VariableValue) -> VariableValue {
        match (self.clone(), other.clone()) {
            (VariableValue::Int32(l), VariableValue::Int32(r)) => VariableValue::Int32(l * r),
            (VariableValue::Int64(l), VariableValue::Int64(r)) => VariableValue::Int64(l * r),
            (VariableValue::Float32(l), VariableValue::Float32(r)) => VariableValue::Float32(l * r),
            (VariableValue::Float64(l), VariableValue::Float64(r)) => VariableValue::Float64(l * r),
            _ => panic!("Unsupported subtraction between {:?} and {:?}", self, other),
        }
    }
}

// `Div` トレイトの実装
impl Div for VariableValue {
    type Output = VariableValue;

    fn div(self, other: VariableValue) -> VariableValue {
        match (self.clone(), other.clone()) {
            (VariableValue::Int32(l), VariableValue::Int32(r)) => VariableValue::Int32(l / r),
            (VariableValue::Int64(l), VariableValue::Int64(r)) => VariableValue::Int64(l / r),
            (VariableValue::Float32(l), VariableValue::Float32(r)) => VariableValue::Float32(l / r),
            (VariableValue::Float64(l), VariableValue::Float64(r)) => VariableValue::Float64(l / r),
            _ => panic!("Unsupported subtraction between {:?} and {:?}", self, other),
        }
    }
}

impl Decoder {
    pub fn evaluate(&mut self, node: &Box<Node>) -> R<VariableValue, String> {
        self.current_node = Some(node.clone());
        //info!("current_node: {:?}", self.current_node.clone());

        match &node.node_value()() {
            NodeValue::If(condition, body) => self.evaluate_if_statement(condition, body),
            NodeValue::While(condition, body) => self.evaluate_while_statement(condition, body),
            NodeValue::MultiComment(content, (_, _)) => {
                self.evaluate_multi_comment(content.to_vec())
            }
            NodeValue::SingleComment(content, (_, _)) => self.evaluate_single_comment(content),
            NodeValue::Function(func_name, args, body, ret_value, ret_type) => {
                self.evaluate_function(func_name, args, body, ret_value, ret_type)
            }
            NodeValue::Return(ret_value) => {
                if self.is_in_function_scope() {
                    let ret = self.evaluate_return(ret_value);
                    info!("Return: {:?}", ret);
                    self.pop_local_stack_frame();
                    ret
                } else {
                    let node = match self.current_node.clone() {
                        Some(v) => v,
                        _ => todo!(),
                    };
                    return Err(custom_compile_error!(
                        node.line(),
                        node.column(),
                        &self.input(),
                        "Return statement outside of function scope"
                    ));
                }
            }
            NodeValue::ReturnType(ret_type) => self.convert_to_primitive_type(ret_type),
            NodeValue::Call(func_name, args) => self.evaluate_call(node, func_name, args),
            NodeValue::Number(value) => Ok(VariableValue::Int32(*value)),
            NodeValue::Bool(value) => Ok(VariableValue::Bool(*value)),
            NodeValue::String(value) => Ok(VariableValue::Str(value.clone())),
            NodeValue::Assign(var_node, expr_node) => self.evaluate_assign(var_node, expr_node),
            NodeValue::Block(nodes) => self.evaluate_block(nodes),
            NodeValue::Variable(name) => self.evaluate_variable(name),
            NodeValue::VariableDeclaration(var_node, _, expr_node) => {
                self.evaluate_variable_declaration(var_node, expr_node)
            }
            NodeValue::Add(_left, _right)
            | NodeValue::Sub(_left, _right)
            | NodeValue::Mul(_left, _right)
            | NodeValue::Div(_left, _right)
            | NodeValue::AddAssign(_left, _right)
            | NodeValue::SubAssign(_left, _right)
            | NodeValue::MulAssign(_left, _right)
            | NodeValue::DivAssign(_left, _right) => self.evaluate_binary_op(node),
            NodeValue::Increment(_) => self.evaluate_binary_op(node),
            NodeValue::Decrement(_) => self.evaluate_binary_op(node),

            NodeValue::Empty | NodeValue::StatementEnd => Ok(VariableValue::Unit(())), // 空のノードをvoid(ユニット)で初期化

            _ => {
                let node = match self.current_node.clone() {
                    Some(v) => v,
                    _ => todo!(),
                };
                return Err(custom_compile_error!(
                    node.line(),
                    node.column(),
                    &self.input(),
                    "Unsupported node type: {:?}",
                    node.node_value()()
                ));
            }
        }
    }
    pub fn convert_to_primitive_type(&mut self, ret_type: &Box<Node>) -> R<VariableValue, String> {
        let value = self.evaluate(&ret_type)?;
        Ok(value)
    }
    pub fn evaluate_assign(
        &mut self,
        var_node: &Box<Node>,
        expr_node: &Box<Node>,
    ) -> R<VariableValue, String> {
        let value = self.evaluate(expr_node)?;
        if let NodeValue::Variable(var_name) = &var_node.node_value()() {
            let mut assigned = false;

            // 関数ごとのローカルスタックをチェック
            for local_vars_stack in self
                .func_lists
                .values_mut()
                .flat_map(|(_, _, _, _, stack)| stack.iter_mut())
            {
                for local_vars in local_vars_stack {
                    if local_vars.contains_key(var_name) {
                        local_vars.insert(var_name.clone(), value.clone());
                        info!(
                            "Assigned Local Variable: name: {} value: {:?}",
                            var_name, value
                        );
                        assigned = true;
                        break;
                    }
                }
                if assigned {
                    break;
                }
            }

            // グローバル変数をチェック
            if !assigned && self.global_variables.contains_key(var_name) {
                self.global_variables
                    .insert(var_name.clone(), value.clone());
                info!(
                    "Assigned Global Variable: name: {} value: {:?}",
                    var_name, value
                );
                assigned = true;
            }

            if !assigned {
                let node = match self.current_node.clone() {
                    Some(v) => v,
                    _ => todo!(),
                };

                return Err(custom_compile_error!(
                    node.line(),
                    node.column(),
                    &self.input(),
                    "Variable {:?} not found in any scope",
                    var_name
                ));
            }

            self.last_var_name = Some(var_name.clone());
        } else {
            let node = match self.current_node.clone() {
                Some(v) => v,
                _ => todo!(),
            };

            return Err(custom_compile_error!(
                node.line(),
                node.column(),
                &self.input(),
                "Left-hand side of assignment must be a variable."
            ));
        }
        Ok(value)
    }
    fn evaluate_variable_declaration(
        &mut self,
        var_node: &Box<Node>,
        expr_node: &Box<Node>,
    ) -> R<VariableValue, String> {
        let var_name = match &var_node.node_value()() {
            NodeValue::Variable(name) => name.clone(),
            _ => {
                return Err(custom_compile_error!(
                    var_node.line(),
                    var_node.column(),
                    &self.input(),
                    "Expected a variable name in variable declaration"
                ));
            }
        };

        let value = self.evaluate(expr_node)?;
        let mut is_redefined = false;

        // 関数ごとのローカルスタックをチェック
        for local_vars_stack in self
            .func_lists
            .values()
            .flat_map(|(_, _, _, _, stack)| stack.iter())
        {
            for local_vars in local_vars_stack {
                if local_vars.contains_key(&var_name) {
                    is_redefined = true;
                    break;
                }
            }
            if is_redefined {
                break;
            }
        }
        if self.global_variables.contains_key(&var_name) {
            is_redefined = true;
        }

        if is_redefined {
            let node = match self.current_node.clone() {
                Some(v) => v,
                _ => todo!(),
            };

            return Err(custom_compile_error!(
                node.line(),
                node.column(),
                &self.input(),
                "The variable name {:?} is already defined",
                var_name
            ));
        }

        // 現在の関数のローカルスタックに変数を追加
        if let Some(local_vars_stack) = self
            .func_lists
            .values_mut()
            .flat_map(|(_, _, _, _, stack)| stack.last_mut())
            .next()
        {
            if let Some(local_vars) = local_vars_stack.last_mut() {
                local_vars.insert(var_name.clone(), value.clone());
                info!(
                    "Declare Local Variable: name: {} value: {:?} in function: {:?}",
                    var_name.clone(),
                    value.clone(),
                    self.current_function.clone()
                );
            }
        } else {
            self.global_variables
                .insert(var_name.clone(), value.clone());
            info!(
                "Declare Global Variable: name: {} value: {:?} in function: {:?}",
                var_name.clone(),
                value.clone(),
                self.current_function().clone()
            );
        }

        self.last_var_name = Some(var_name.clone());
        Ok(value)
    }

    fn evaluate_block(&mut self, nodes: &Vec<Box<Node>>) -> R<VariableValue, String> {
        let current_function = self.current_function.clone();
        let mut func_lists = self.func_lists();
        let stack = if let Some(func_name) = current_function.clone() {
            func_lists
                .get_mut(&func_name)
                .and_then(|(_, _, _, _, stacks)| stacks.last_mut())
        } else {
            None
        };

        if let Some(local_stack) = stack {
            local_stack.push(HashMap::new());
            info!(
                "in {}: Local stack before evaluation: {:?}",
                current_function.clone().unwrap_or("unknown".to_string()),
                local_stack
            );
            let mut value = VariableValue::Unit(());

            let nodes_clone = nodes.clone();

            for node in nodes_clone {
                let node_clone = node.clone();
                value = self.evaluate(&node_clone)?;
                if let NodeValue::Return(_) = node.node_value()() {
                    local_stack.pop();
                    info!(
                        "in {}: Local stack after pop (return): {:?}",
                        current_function.clone().unwrap_or("unknown".to_string()),
                        local_stack
                    );
                    return Ok(value);
                }
            }
            info!(
                "in {}: Local stack before evaluation: {:?}",
                current_function.clone().unwrap_or("unknown".to_string()),
                local_stack
            );
            local_stack.pop();
            Ok(value)
        } else {
            let node = match self.current_node.clone() {
                Some(v) => v,
                _ => todo!(),
            };
            return Err(custom_compile_error!(
                node.line(),
                node.column(),
                &self.input(),
                "No local stack found for the current function"
            ));
        }
    }
    fn pop_local_stack_frame(&mut self) {
        if let Some(local_vars_stack) = self
            .func_lists
            .values_mut()
            .flat_map(|(_, _, _, _, stack)| stack.last_mut())
            .next()
        {
            local_vars_stack.pop();
        }
    }

    fn evaluate_call(
        &mut self,
        node: &Box<Node>,
        func_name: &String,
        args: &Vec<Node>,
    ) -> R<VariableValue, String> {
        // 一時的に必要なデータをコピー
        let (param_names, body, local_stack) = {
            if let Some((param_names, body, _, _, local_stack)) = self.func_lists.get(func_name) {
                (param_names.clone(), body.clone(), local_stack.clone())
            } else {
                return Err(custom_compile_error!(
                    node.line(),
                    node.column(),
                    &self.input(),
                    "Function {:?} not defined",
                    func_name
                ));
            }
        };

        if args.len() != param_names.len() {
            return Err(custom_compile_error!(
                node.line(),
                node.column(),
                &self.input(),
                "Function {:?} expects {:?} arguments, but {:?} were provided",
                func_name,
                param_names.len(),
                args.len()
            ));
        }

        let mut local_vars = HashMap::new();
        for (param_name, arg) in param_names.iter().zip(args.iter()) {
            let value = self.evaluate(&Box::new(arg.clone()))?;
            local_vars.insert(param_name.clone(), value);
        }

        // ミュータブルな借用を再度取得してローカルスタックを更新
        if let Some((_, _, _, _, local_stack)) = self.func_lists.get_mut(func_name) {
            local_stack.push(vec![local_vars]);
        }

        self.current_function = Some(func_name.clone());
        let result = self.evaluate(&body);

        // ミュータブルな借用を再度取得してローカルスタックをポップ
        if let Some((_, _, _, _, local_stack)) = self.func_lists.get_mut(func_name) {
            local_stack.pop();
        }

        self.current_function = None;
        result
    }

    fn evaluate_return(&mut self, ret_value: &Box<Node>) -> R<VariableValue, String> {
        let value = self.evaluate(ret_value)?;
        if self.is_in_function_scope() {
            self.current_node = None;
            return Ok(value);
        }
        return Err(custom_compile_error!(
            ret_value.line(),
            ret_value.column(),
            &self.input(),
            "Return Error",
        ));
    }

    pub fn evaluate_function(
        &mut self,
        func_name: &String,
        args: &Vec<String>,
        body: &Box<Node>,
        ret_value: &Box<Node>,
        ret_type: &Box<Node>,
    ) -> R<VariableValue, String> {
        // まず関数のシグネチャ、型情報だけを登録
        self.register_function_signature(func_name.clone(), args.clone(), ret_type.clone())?;

        let ret_type = self.convert_to_primitive_type(&ret_type.clone())?;
        info!(
            "define function signature: {:?} return_type: {:?}",
            func_name,
            ret_type.clone()
        );

        // 次に関数のボディを評価
        let ret_value = self.evaluate(ret_value)?;
        self.register_function_body(func_name.clone(), body.clone(), ret_value.clone())?;
        info!("define function body: {:?}", func_name);

        Ok(VariableValue::Unit(()))
    }

    fn register_function_signature(
        &mut self,
        name: String,
        args: Vec<String>,
        ret_type: Box<Node>,
    ) -> R<(), String> {
        if self.func_lists.contains_key(&name) {
            let node = match self.current_node.clone() {
                Some(v) => v,
                _ => todo!(),
            };
            return Err(custom_compile_error!(
                node.line(),
                node.column(),
                &self.input(),
                "Function name {:?} is already defined",
                name
            ));
        }
        let ret_type = self.convert_to_primitive_type(&ret_type)?;
        self.func_lists.insert(
            name.clone(),
            (
                args,
                Box::new(Node::new(NodeValue::Empty, None, 0, 0)),
                VariableValue::Unit(()),
                ret_type,
                Vec::new(),
            ),
        );
        Ok(())
    }

    fn register_function_body(
        &mut self,
        name: String,
        body: Box<Node>,
        ret_value: VariableValue,
    ) -> R<(), String> {
        // 一時的に必要なデータをコピー
        let (args, return_type, mut local_stack) = {
            if let Some((args, _, _, return_type, local_stack)) = self.func_lists.get(&name) {
                (args.clone(), return_type.clone(), local_stack.clone())
            } else {
                let node = match self.current_node.clone() {
                    Some(v) => v,
                    _ => todo!(),
                };
                return Err(custom_compile_error!(
                    node.line(),
                    node.column(),
                    &self.input(),
                    "Function name {:?} is not defined",
                    name
                ));
            }
        };

        // ミュータブルな借用を再度取得して関数のボディを登録
        if let Some((_, _, _, _, local_stack_ref)) = self.func_lists.get_mut(&name) {
            *local_stack_ref = Vec::new();
            local_stack = local_stack_ref.clone();
        }

        self.func_lists.insert(
            name.clone(),
            (args, body, ret_value, return_type, local_stack),
        );

        Ok(())
    }
    fn is_in_function_scope(&self) -> bool {
        self.func_lists
            .values()
            .any(|(_, _, _, _, stack)| !stack.is_empty())
    }
    pub fn evaluate_if_statement(
        &mut self,
        condition: &Box<Node>,
        body: &Box<Node>,
    ) -> R<VariableValue, String> {
        let bool_value = self.evaluate_binary_op(condition)?;
        if let VariableValue::Bool(value) = bool_value {
            if value {
                return Ok(self.evaluate(&body)?);
            }
        }
        Ok(bool_value)
    }
    pub fn evaluate_while_statement(
        &mut self,
        condition: &Box<Node>,
        body: &Box<Node>,
    ) -> R<VariableValue, String> {
        let bool_value = self.evaluate_binary_op(condition)?;
        if let VariableValue::Bool(value) = bool_value {
            while value {
                return Ok(self.evaluate(&body)?);
            }
        }
        Ok(bool_value)
    }

    fn evaluate_multi_comment(&mut self, content: Vec<String>) -> R<VariableValue, String> {
        self.comment_lists
            .insert(format!("comment: {:}", 0), (content, 0));
        Ok(VariableValue::Unit(()))
    }
    fn evaluate_single_comment(&mut self, content: &String) -> R<VariableValue, String> {
        self.comment_lists.insert(
            format!("comment: {:}", 0),
            (vec![(*content.clone()).to_string()], 0),
        );

        Ok(VariableValue::Unit(()))
    }

    fn evaluate_variable(&mut self, name: &String) -> R<VariableValue, String> {
        for local_vars_stack in self
            .func_lists
            .values()
            .flat_map(|(_, _, _, _, stack)| stack.iter())
        {
            for local_vars in local_vars_stack {
                if local_vars.contains_key(name) {
                    info!("Found variable {} in local stack: {:?}", name, local_vars);
                    return Ok(local_vars[name].clone());
                }
            }
        }
        if self.global_variables.contains_key(name) {
            info!(
                "Found variable {} in global scope: {:?}",
                name,
                self.global_variables[name].clone()
            );
            Ok(self.global_variables[name].clone())
        } else {
            return Ok(VariableValue::Int32(0));
        }
    }
    pub fn decode(&mut self, nodes: &Vec<Box<Node>>) -> R<(), String> {
        for node in nodes {
            match &node.node_value()() {
                NodeValue::Assign(var_node, expr_node) => {
                    let value = self.evaluate(expr_node)?;
                    if let NodeValue::Variable(var_name) = &var_node.node_value()() {
                        self.global_variables
                            .insert(var_name.clone(), value.clone());
                        info!(
                            "Assign Global Variable: name: {} value: {:?}",
                            var_name, value
                        );
                    } else {
                        let node = match self.current_node.clone() {
                            Some(v) => v,
                            _ => todo!(),
                        };

                        return Err(custom_compile_error!(
                            node.line(),
                            node.column(),
                            &self.input(),
                            "Left-hand side of assignment must be a variable."
                        ));
                    }
                }
                _ => {
                    let value = self.evaluate(&Box::new(*node.clone()))?;
                    // 他の処理が必要ならここに追加
                }
            }
        }
        Ok(())
    }
    fn evaluate_binary_op(&mut self, node: &Box<Node>) -> R<VariableValue, String> {
        // 条件演算子の処理
        if let NodeValue::Eq(left, right)
        | NodeValue::Ne(left, right)
        | NodeValue::Lt(left, right)
        | NodeValue::Gt(left, right)
        | NodeValue::Le(left, right)
        | NodeValue::Ge(left, right) = &node.node_value()()
        {
            let left_value = self.evaluate(left)?;
            let right_value = self.evaluate(right)?;

            match (&node.node_value()(), left_value, right_value) {
                // 等しい (==)
                (NodeValue::Eq(_, _), VariableValue::Int32(l), VariableValue::Int32(r)) => {
                    Ok(VariableValue::Bool(l == r))
                }
                (NodeValue::Eq(_, _), VariableValue::Str(l), VariableValue::Str(r)) => {
                    Ok(VariableValue::Bool(l == r))
                }
                // 等しくない (!=)
                (NodeValue::Ne(_, _), VariableValue::Int32(l), VariableValue::Int32(r)) => {
                    Ok(VariableValue::Bool(l != r))
                }
                (NodeValue::Ne(_, _), VariableValue::Str(l), VariableValue::Str(r)) => {
                    Ok(VariableValue::Bool(l != r))
                }
                // 小なり (<)
                (NodeValue::Lt(_, _), VariableValue::Int32(l), VariableValue::Int32(r)) => {
                    Ok(VariableValue::Bool(l < r))
                }
                // 大なり (>)
                (NodeValue::Gt(_, _), VariableValue::Int32(l), VariableValue::Int32(r)) => {
                    Ok(VariableValue::Bool(l > r))
                }
                // 以下 (<=)
                (NodeValue::Le(_, _), VariableValue::Int32(l), VariableValue::Int32(r)) => {
                    Ok(VariableValue::Bool(l <= r))
                }
                // 以上 (>=)
                (NodeValue::Ge(_, _), VariableValue::Int32(l), VariableValue::Int32(r)) => {
                    Ok(VariableValue::Bool(l >= r))
                }
                _ => Err("Unsupported operation or mismatched types in condition".to_string()),
            }
        } else if let NodeValue::Increment(left) | NodeValue::Decrement(left) = &node.node_value()() {
            let left_value = self.evaluate(left)?;

            match (&node.node_value()(), left_value) {
                (NodeValue::Increment(_), VariableValue::Int32(l)) => {
                    let _lvalue = self.evaluate(left)?;
                    let new_value = _lvalue.clone() + VariableValue::Int32(1);
                    let rvalue = match new_value {
                        VariableValue::Int32(value) => value,
                        _ => -1,
                    };
                    let value = self.evaluate_assign(
                        left,
                        &Box::new(Node::new(NodeValue::Number(rvalue), None, 0, 0)),
                    );
                    value
                }
                (NodeValue::Decrement(_), VariableValue::Int32(l)) => {
                    let _lvalue = self.evaluate(left)?;
                    let new_value = _lvalue.clone() - VariableValue::Int32(1);
                    let rvalue = match new_value {
                        VariableValue::Int32(value) => value,
                        _ => -1,
                    };
                    let value = self.evaluate_assign(
                        left,
                        &Box::new(Node::new(NodeValue::Number(rvalue), None, 0, 0)),
                    );
                    value
                }

                _ => Err("Unsupported operation or mismatched types".to_string()),
            }
        }
        // 通常の演算子の処理
        else if let NodeValue::Add(left, right)
        | NodeValue::Sub(left, right)
        | NodeValue::Mul(left, right)
        | NodeValue::Div(left, right)
        | NodeValue::AddAssign(left, right)
        | NodeValue::SubAssign(left, right)
        | NodeValue::MulAssign(left, right)
        | NodeValue::DivAssign(left, right) = &node.node_value()()
        {
            let left_value = self.evaluate(left)?;
            let right_value = self.evaluate(right)?;
            match (&node.node_value()(), left_value, right_value) {
                (NodeValue::Add(_, _), VariableValue::Int32(l), VariableValue::Int32(r)) => {
                    Ok(VariableValue::Int32(l + r))
                }
                (NodeValue::Sub(_, _), VariableValue::Int32(l), VariableValue::Int32(r)) => {
                    Ok(VariableValue::Int32(l - r))
                }
                (NodeValue::Mul(_, _), VariableValue::Int32(l), VariableValue::Int32(r)) => {
                    Ok(VariableValue::Int32(l * r))
                }
                (NodeValue::Div(_, _), VariableValue::Int32(l), VariableValue::Int32(r)) => {
                    if r == 0 {
                        Err("Division by zero.".to_string())
                    } else {
                        Ok(VariableValue::Int32(l / r))
                    }
                }
                (NodeValue::AddAssign(_, _), VariableValue::Int32(l), VariableValue::Int32(r)) => {
                    let _lvalue = self.evaluate(left)?;
                    let _rvalue = self.evaluate(right)?;
                    let new_value = _lvalue.clone() + _rvalue.clone();

                    let rvalue = match new_value {
                        VariableValue::Int32(value) => value,
                        _ => -1,
                    };
                    let value = self.evaluate_assign(
                        left,
                        &Box::new(Node::new(NodeValue::Number(rvalue), None, 0, 0)),
                    );
                    value
                }
                (NodeValue::SubAssign(_, _), VariableValue::Int32(l), VariableValue::Int32(r)) => {
                    let _lvalue = self.evaluate(left)?;
                    let _rvalue = self.evaluate(right)?;
                    let new_value = _lvalue.clone() - _rvalue.clone();

                    let rvalue = match new_value {
                        VariableValue::Int32(value) => value,
                        _ => -1,
                    };
                    let value = self.evaluate_assign(
                        left,
                        &Box::new(Node::new(NodeValue::Number(rvalue), None, 0, 0)),
                    );
                    value
                }
                (NodeValue::MulAssign(_, _), VariableValue::Int32(l), VariableValue::Int32(r)) => {
                    let _lvalue = self.evaluate(left)?;
                    let _rvalue = self.evaluate(right)?;
                    let new_value = _lvalue.clone() * _rvalue.clone();

                    let rvalue = match new_value {
                        VariableValue::Int32(value) => value,
                        _ => -1,
                    };
                    let value = self.evaluate_assign(
                        left,
                        &Box::new(Node::new(NodeValue::Number(rvalue), None, 0, 0)),
                    );
                    value
                }
                (NodeValue::DivAssign(_, _), VariableValue::Int32(l), VariableValue::Int32(r)) => {
                    let _lvalue = self.evaluate(left)?;
                    let _rvalue = self.evaluate(right)?;
                    let new_value = _lvalue.clone() / _rvalue.clone();

                    let rvalue = match new_value {
                        VariableValue::Int32(value) => value,
                        _ => -1,
                    };
                    let value = self.evaluate_assign(
                        left,
                        &Box::new(Node::new(NodeValue::Number(rvalue), None, 0, 0)),
                    );
                    value
                }

                (NodeValue::Add(_, _), VariableValue::Str(l), VariableValue::Str(r)) => {
                    Ok(VariableValue::Str(l + &r))
                }
                _ => Err("Unsupported operation or mismatched types".to_string()),
            }
        } else {
            Err("Unsupported binary operation".to_string())
        }
    }
}
impl Decoder {
    pub fn new(input: String) -> Self {
        Decoder {
            global_variables: HashMap::new(),
            func_lists: HashMap::new(),
            last_var_name: None,
            comment_lists: HashMap::new(),
            current_node: None,
            current_function: None,
            input: input.clone(),
        }
    }
}
*/




/*






pub struct AsmInterpreter {
    variables: HashMap<String, i32>,
    asm_code: Vec<String>,
}

impl AsmInterpreter {
    pub fn new() -> Self {
        AsmInterpreter {
            variables: HashMap::new(),
            asm_code: Vec::new(),
        }
    }

    pub fn decode(&mut self, nodes: &Vec<Box<Node>>) -> Result<(), String> {
        for node in nodes {
            self.interpret(node)?;
        }
        Ok(())
    }

    fn interpret(&mut self, node: &Box<Node>) -> Result<(), String> {
        match &node.node_value()() {
            NodeValue::VariableDeclaration(var, _typ, value) => {
                if let NodeValue::Variable(var_name) = &var.node_value()() {
                    if let NodeValue::Number(num) = &value.node_value()() {
                        self.variables.insert(var_name.clone(), *num);
                        self.asm_code.push(format!("mov {}, {}", var_name, num));
                    }
                }
            }
            NodeValue::Assign(var, value) => {
                if let NodeValue::Variable(var_name) = &var.node_value()() {
                    if let NodeValue::Number(num) = &value.node_value()() {
                        self.variables.insert(var_name.clone(), *num);
                        self.asm_code.push(format!("mov {}, {}", var_name, num));
                    }
                }
            }
            NodeValue::Add(lhs, rhs) => {
                if let NodeValue::Variable(var_name) = &lhs.node_value()() {
                    if let NodeValue::Number(num) = &rhs.node_value()() {
                        if let Some(var_value) = self.variables.get(var_name) {
                            let result = var_value + num;
                            self.variables.insert(var_name.clone(), result);
                            self.asm_code.push(format!("add {}, {}", var_name, num));
                        }
                    }
                }
            }
            NodeValue::Sub(lhs, rhs) => {
                if let NodeValue::Variable(var_name) = &lhs.node_value()() {
                    if let NodeValue::Number(num) = &rhs.node_value()() {
                        if let Some(var_value) = self.variables.get(var_name) {
                            let result = var_value - num;
                            self.variables.insert(var_name.clone(), result);
                            self.asm_code.push(format!("sub {}, {}", var_name, num));
                        }
                    }
                }
            }
            NodeValue::Mul(lhs, rhs) => {
                if let NodeValue::Variable(var_name) = &lhs.node_value()() {
                    if let NodeValue::Number(num) = &rhs.node_value()() {
                        if let Some(var_value) = self.variables.get(var_name) {
                            self.asm_code.push(format!("mov eax, {}", var_name));
                            self.asm_code.push(format!("imul eax, {}", num));
                            self.asm_code.push(format!("mov {}, eax", var_name));
                        }
                    }
                }
            }
            NodeValue::Div(lhs, rhs) => {
                if let NodeValue::Variable(var_name) = &lhs.node_value()() {
                    if let NodeValue::Number(num) = &rhs.node_value()() {
                        if let Some(var_value) = self.variables.get(var_name) {
                            self.asm_code.push(format!("mov eax, {}", var_name));
                            self.asm_code.push(format!("mov ebx, {}", num));
                            self.asm_code.push("cdq".to_string());
                            self.asm_code.push("idiv ebx".to_string());
                            self.asm_code.push(format!("mov {}, eax", var_name));
                        }
                    }
                }
            }
            NodeValue::Return(var) => {
                if let NodeValue::Variable(var_name) = &var.node_value()() {
                    if let Some(_var_value) = self.variables.get(var_name) {
                        self.asm_code.push(format!("mov eax, {}", var_name));
                        self.asm_code.push("ret".to_string());
                    }
                }
            }
            NodeValue::Variable(var_name) => {
                if let Some(var_value) = self.variables.get(var_name) {
                    self.asm_code.push(format!("mov eax, {}", var_name));
                }
            }
            NodeValue::Number(num) => {
                self.asm_code.push(format!("mov eax, {}", num));
            }
            NodeValue::If(cond, body) => {
                self.asm_code.push("cmp".to_string());
                self.interpret(cond)?;
                self.asm_code.push("je".to_string());
                self.interpret(body)?;
            }
            NodeValue::While(cond, body) => {
                self.asm_code.push("cmp".to_string());
                self.interpret(cond)?;
                self.asm_code.push("je".to_string());
                self.interpret(body)?;
                self.asm_code.push("jmp".to_string());
            }
            _ => {}
        }
        Ok(())
    }

    pub fn get_asm_code(&self) -> String {
        format!(
            ".data\n{}\n.code\nmain PROC\n{}\nmain ENDP\nEND main",
            self.variables
                .keys()
                .map(|var| format!("{} DWORD ?", var))
                .collect::<Vec<_>>()
                .join("\n"),
            self.asm_code.join("\n")
        )
    }
}

*/
