impl<'a> Parser<'a> {
    // 既存のコード...

    fn parse_function(&mut self) -> R<Node> {
        // 関数名を取得
        let func_name = self.current_token().token_value().clone();
        self.next_token(); // 関数名をスキップ

        // 引数リストを解析
        if self.current_token().token_type() != TokenType::LeftParen {
            return Err(anyhow::anyhow!("Expected '(' after function name"));
        }
        self.next_token(); // '(' をスキップ

        let mut params = Vec::new();
        while self.current_token().token_type() != TokenType::RightParen {
            if let TokenType::Ident = self.current_token().token_type() {
                params.push(self.current_token().token_value().clone());
                self.next_token();
            }
            if self.current_token().token_type() == TokenType::Comma {
                self.next_token(); // ',' をスキップ
            }
        }
        self.next_token(); // ')' をスキップ

        // 関数本体を解析
        if self.current_token().token_type() != TokenType::LeftCurlyBreces {
            return Err(anyhow::anyhow!("Expected '{' after function parameters"));
        }
        self.next_token(); // '{' をスキップ

        let mut body = Vec::new();
        while self.current_token().token_type() != TokenType::RightCurlyBreces {
            body.push(*self.expr()?);
            if self.current_token().token_type() == TokenType::Semi {
                self.next_token(); // ';' をスキップ
            }
        }
        self.next_token(); // '}' をスキップ

        Ok(Node::new(NodeType::Function(func_name, params, body), None))
    }

    // 既存のコード...
}




/*
            if self.current_token().token_type() == TokenType::Ident && self.peek_next_token(1).token_type() == TokenType::LeftParen {
                let func = self.parse_function()?;
                nodes.push(*func);
            }
        
            if self.current_token().token_type() == TokenType::Ident && self.peek_next_token(1).token_type() == TokenType::Equals {
                let var = self.current_token().token_value().clone();
                self.next_token(); // =
                self.next_token(); // move to value
                let value_node = self.expr()?;
                nodes.push(Node::new(
                    NodeType::Assign(
                        Box::new(Node::new(NodeType::Variable(var), None)),
                        value_node
                    ),
                    None
                ));
            } else {
                let expr_node = self.expr()?;
                nodes.push(*expr_node);
            }
            
            if self.current_token().token_type() == TokenType::Semi {
                self.next_token(); // skip ;
            } else{
                    warn!("Missing semicolon at end of the statement.");    
            }
*/

